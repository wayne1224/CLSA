# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'c:\Users\fuhan\Desktop\NLP\CLSA\myform.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from datetime import datetime
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
import win32api
import database.DatabaseApi

class BirthdayEdit(QtWidgets.QDateEdit):
    def __init__(self, parent=None):
        super().__init__(parent, calendarPopup=True)

class DateEdit(QtWidgets.QDateTimeEdit):
    def __init__(self, parent=None):
        super().__init__(parent, calendarPopup=True)
        self.setDateTime(QtCore.QDateTime.currentDateTime())
        self.setDisplayFormat("yyyy-MM-dd HH:mm")

class Myform(QtWidgets.QWidget):
    procID = QtCore.pyqtSignal(dict)
    procStart = QtCore.pyqtSignal(dict)
    procClear = QtCore.pyqtSignal()
    def __init__(self):
        super(Myform, self).__init__()

        self.layout = QtWidgets.QVBoxLayout()
        self.setLayout(self.layout)
        self.lbl_title = QtWidgets.QLabel()
        font = QtGui.QFont()
        font.setPointSize(18)
        self.lbl_title.setFont(font)
        self.lbl_title.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lbl_title.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_title.setObjectName("lbl_title")
        self.layout.addWidget(self.lbl_title)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.lbl_SLP = QtWidgets.QLabel()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_SLP.setFont(font)
        self.lbl_SLP.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lbl_SLP.setObjectName("lbl_SLP")
        self.verticalLayout.addWidget(self.lbl_SLP)
        self.lbl_caseName = QtWidgets.QLabel()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_caseName.setFont(font)
        self.lbl_caseName.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lbl_caseName.setObjectName("lbl_caseName")
        self.verticalLayout.addWidget(self.lbl_caseName)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.input_SLP = QtWidgets.QLineEdit()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.input_SLP.sizePolicy().hasHeightForWidth())
        self.input_SLP.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.input_SLP.setFont(font)
        self.input_SLP.setObjectName("input_SLP")
        self.verticalLayout_2.addWidget(self.input_SLP)
        self.input_caseName = QtWidgets.QLineEdit()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.input_caseName.sizePolicy().hasHeightForWidth())
        self.input_caseName.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.input_caseName.setFont(font)
        self.input_caseName.setObjectName("input_caseName")
        self.verticalLayout_2.addWidget(self.input_caseName)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.lbl_caseID = QtWidgets.QLabel()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_caseID.setFont(font)
        self.lbl_caseID.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_caseID.setObjectName("lbl_caseID")
        self.verticalLayout_3.addWidget(self.lbl_caseID)
        self.lbl_gender = QtWidgets.QLabel()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_gender.sizePolicy().hasHeightForWidth())
        self.lbl_gender.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_gender.setFont(font)
        self.lbl_gender.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_gender.setObjectName("label_7")
        self.verticalLayout_3.addWidget(self.lbl_gender)
        self.horizontalLayout.addLayout(self.verticalLayout_3)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.input_caseID = QtWidgets.QLineEdit()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.input_caseID.sizePolicy().hasHeightForWidth())
        self.input_caseID.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.input_caseID.setFont(font)
        self.input_caseID.setObjectName("input_caseID")
        self.horizontalLayout_2.addWidget(self.input_caseID)
        self.btn_search = QtWidgets.QPushButton()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_search.sizePolicy().hasHeightForWidth())
        self.btn_search.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.btn_search.setFont(font)
        self.btn_search.setObjectName("btn_search")
        self.btn_search.clicked.connect(self.searchCaseID)
        self.horizontalLayout_2.addWidget(self.btn_search)
        self.verticalLayout_4.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.rbtn_male = QtWidgets.QRadioButton()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rbtn_male.sizePolicy().hasHeightForWidth())
        self.rbtn_male.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.rbtn_male.setFont(font)
        self.rbtn_male.setObjectName("rbtn_male")
        self.horizontalLayout_3.addWidget(self.rbtn_male)
        self.rbtn_female = QtWidgets.QRadioButton()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rbtn_female.sizePolicy().hasHeightForWidth())
        self.rbtn_female.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.rbtn_female.setFont(font)
        self.rbtn_female.setObjectName("rbtn_female")
        self.horizontalLayout_3.addWidget(self.rbtn_female)

        self.verticalLayout_4.addLayout(self.horizontalLayout_3)
        self.horizontalLayout.addLayout(self.verticalLayout_4)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.lbl_recordDate = QtWidgets.QLabel()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_recordDate.setFont(font)
        self.lbl_recordDate.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_recordDate.setObjectName("lbl_recordDate")
        self.verticalLayout_5.addWidget(self.lbl_recordDate)
        self.lbl_birthday = QtWidgets.QLabel()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_birthday.setFont(font)
        self.lbl_birthday.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_birthday.setObjectName("lbl_birthday")
        self.verticalLayout_5.addWidget(self.lbl_birthday)
        self.horizontalLayout.addLayout(self.verticalLayout_5)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.dateEdit_recordDate = DateEdit()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.dateEdit_recordDate.setFont(font)
        self.dateEdit_recordDate.setObjectName("dateEdit_recordDate")
        self.verticalLayout_6.addWidget(self.dateEdit_recordDate)
        self.dateEdit_birthday = BirthdayEdit()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.dateEdit_birthday.setFont(font)
        self.dateEdit_birthday.setObjectName("dateEdit_birthday")
        self.verticalLayout_6.addWidget(self.dateEdit_birthday)
        self.horizontalLayout.addLayout(self.verticalLayout_6)
        
        # self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        # self.layoutGender = QtWidgets.QGroupBox()
        # self.layoutGender.setLayout(self.horizontalLayout)
        # self.layoutGender.setStyleSheet("border: 1px solid red;")
        # self.layout.addWidget(self.layoutGender)

        self.layout.addLayout(self.horizontalLayout)
        self.line = QtWidgets.QFrame()
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.layout.addWidget(self.line)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.lbl_scenario = QtWidgets.QLabel()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_scenario.setFont(font)
        self.lbl_scenario.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_scenario.setObjectName("lbl_scenario")
        self.verticalLayout_7.addWidget(self.lbl_scenario)
        self.lbl_location = QtWidgets.QLabel()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_location.setFont(font)
        self.lbl_location.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_location.setObjectName("lbl_location")
        self.verticalLayout_7.addWidget(self.lbl_location)
        self.lbl_inducement = QtWidgets.QLabel()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_inducement.setFont(font)
        self.lbl_inducement.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_inducement.setObjectName("lbl_inducement")
        self.verticalLayout_7.addWidget(self.lbl_inducement)
        self.horizontalLayout_4.addLayout(self.verticalLayout_7)
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.input_scenario = QtWidgets.QLineEdit()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.input_scenario.sizePolicy().hasHeightForWidth())
        self.input_scenario.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.input_scenario.setFont(font)
        self.input_scenario.setObjectName("input_scenario")
        self.verticalLayout_8.addWidget(self.input_scenario)
        self.input_location = QtWidgets.QLineEdit()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.input_location.sizePolicy().hasHeightForWidth())
        self.input_location.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.input_location.setFont(font)
        self.input_location.setObjectName("input_location")
        self.verticalLayout_8.addWidget(self.input_location)
        self.input_inducement = QtWidgets.QLineEdit()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.input_inducement.sizePolicy().hasHeightForWidth())
        self.input_inducement.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.input_inducement.setFont(font)
        self.input_inducement.setObjectName("input_inducement")
        self.verticalLayout_8.addWidget(self.input_inducement)
        self.horizontalLayout_4.addLayout(self.verticalLayout_8)
        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.lbl_recordDataName = QtWidgets.QLabel()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_recordDataName.setFont(font)
        self.lbl_recordDataName.setObjectName("lbl_recordDataName")
        self.verticalLayout_9.addWidget(self.lbl_recordDataName)
        self.lbl_interType = QtWidgets.QLabel()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_interType.setFont(font)
        self.lbl_interType.setObjectName("lbl_interType")
        self.verticalLayout_9.addWidget(self.lbl_interType)
        self.lbl_childTotalUtterNum = QtWidgets.QLabel()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_childTotalUtterNum.setFont(font)
        self.lbl_childTotalUtterNum.setObjectName("lbl_childTotalUtterNum")
        self.verticalLayout_9.addWidget(self.lbl_childTotalUtterNum)
        self.horizontalLayout_4.addLayout(self.verticalLayout_9)
        self.verticalLayout_10 = QtWidgets.QVBoxLayout()
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.input_recordDataName = QtWidgets.QLineEdit()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.input_recordDataName.sizePolicy().hasHeightForWidth())
        self.input_recordDataName.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.input_recordDataName.setFont(font)
        self.input_recordDataName.setObjectName("input_recordDataName")
        self.verticalLayout_10.addWidget(self.input_recordDataName)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.rbtn_conversation = QtWidgets.QRadioButton()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.rbtn_conversation.setFont(font)
        self.rbtn_conversation.setObjectName("rbtn_conversation")
        self.horizontalLayout_5.addWidget(self.rbtn_conversation)
        self.rbtn_game = QtWidgets.QRadioButton()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.rbtn_game.setFont(font)
        self.rbtn_game.setObjectName("rbtn_game")
        self.horizontalLayout_5.addWidget(self.rbtn_game)
        self.rbtn_narrative = QtWidgets.QRadioButton()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.rbtn_narrative.setFont(font)
        self.rbtn_narrative.setObjectName("rbtn_narrative")
        self.horizontalLayout_5.addWidget(self.rbtn_narrative)

        self.layoutInteraction = QtWidgets.QGroupBox()
        self.layoutInteraction.setLayout(self.horizontalLayout_5)
        self.layoutInteraction.setStyleSheet("border: 1px")
        self.verticalLayout_10.addWidget(self.layoutInteraction)

        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.lbl_showTotalUtterNum = QtWidgets.QLabel()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_showTotalUtterNum.setFont(font)
        self.lbl_showTotalUtterNum.setObjectName("lbl_showTotalUtterNum")
        self.horizontalLayout_12.addWidget(self.lbl_showTotalUtterNum)
        self.lbl_validUtterNum = QtWidgets.QLabel()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_validUtterNum.setFont(font)
        self.lbl_validUtterNum.setObjectName("lbl_validUtterNum")
        self.horizontalLayout_12.addWidget(self.lbl_validUtterNum)
        self.lbl_showValidUtterNum = QtWidgets.QLabel()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_showValidUtterNum.setFont(font)
        self.lbl_showValidUtterNum.setObjectName("lbl_showValidUtterNum")
        self.horizontalLayout_12.addWidget(self.lbl_showValidUtterNum)
        self.verticalLayout_10.addLayout(self.horizontalLayout_12)
        self.horizontalLayout_4.addLayout(self.verticalLayout_10)
        self.layout.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.lbl_participants = QtWidgets.QLabel()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_participants.setFont(font)
        self.lbl_participants.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lbl_participants.setObjectName("lbl_participants")
        self.horizontalLayout_6.addWidget(self.lbl_participants)    
        self.ckb_tester = QtWidgets.QCheckBox()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.ckb_tester.setFont(font)
        self.ckb_tester.setObjectName("ckb_tester")
        self.horizontalLayout_6.addWidget(self.ckb_tester)
        self.ckb_mom = QtWidgets.QCheckBox()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.ckb_mom.setFont(font)
        self.ckb_mom.setObjectName("ckb_mom")
        self.horizontalLayout_6.addWidget(self.ckb_mom)
        self.ckb_dad = QtWidgets.QCheckBox()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.ckb_dad.setFont(font)
        self.ckb_dad.setObjectName("ckb_dad")
        self.horizontalLayout_6.addWidget(self.ckb_dad)
        self.ckb_teacher = QtWidgets.QCheckBox()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.ckb_teacher.setFont(font)
        self.ckb_teacher.setObjectName("ckb_teacher")
        self.horizontalLayout_6.addWidget(self.ckb_teacher)
        # self.ckb_child = QtWidgets.QCheckBox()
        # font = QtGui.QFont()
        # font.setPointSize(14)
        # self.ckb_child.setFont(font)
        # self.ckb_child.setObjectName("ckb_child")
        # self.horizontalLayout_6.addWidget(self.ckb_child)
        self.ckb_others = QtWidgets.QCheckBox()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.ckb_others.setFont(font)
        self.ckb_others.setObjectName("ckb_others")
        self.horizontalLayout_6.addWidget(self.ckb_others)
        self.input_others = QtWidgets.QLineEdit()
        self.input_others.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.input_others.sizePolicy().hasHeightForWidth())
        self.input_others.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.input_others.setFont(font)
        self.input_others.setObjectName("input_others")
        self.horizontalLayout_6.addWidget(self.input_others)
        self.input_others.setStyleSheet("border: 1px solid initial;")
        self.layoutParticipants = QtWidgets.QGroupBox()
        self.layoutParticipants.setLayout(self.horizontalLayout_6)
        self.layoutParticipants.setStyleSheet("border: 1px;")
        self.layout.addWidget(self.layoutParticipants)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.lbl_equipment = QtWidgets.QLabel()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_equipment.setFont(font)
        self.lbl_equipment.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lbl_equipment.setObjectName("lbl_equipment")
        self.horizontalLayout_7.addWidget(self.lbl_equipment)

        self.rbtn_cellphone = QtWidgets.QRadioButton()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.rbtn_cellphone.setFont(font)
        self.rbtn_cellphone.setObjectName("rbtn_cellphone")
        self.horizontalLayout_7.addWidget(self.rbtn_cellphone)

        self.rbtn_pen = QtWidgets.QRadioButton()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.rbtn_pen.setFont(font)
        self.rbtn_pen.setObjectName("rbtn_pen")
        self.horizontalLayout_7.addWidget(self.rbtn_pen)

        self.rbtn_camera = QtWidgets.QRadioButton()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.rbtn_camera.setFont(font)
        self.rbtn_camera.setObjectName("rbtn_camera")
        self.horizontalLayout_7.addWidget(self.rbtn_camera)

        self.rbtn_otherEquip = QtWidgets.QRadioButton()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.rbtn_otherEquip.setFont(font)
        self.rbtn_otherEquip.setObjectName("rbtn_otherEquip")
        self.horizontalLayout_7.addWidget(self.rbtn_otherEquip)
        self.layout.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.lbl_help = QtWidgets.QLabel()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_help.setFont(font)
        self.lbl_help.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lbl_help.setObjectName("lbl_help")
        self.horizontalLayout_8.addWidget(self.lbl_help)
        self.rbtn_few = QtWidgets.QRadioButton()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.rbtn_few.setFont(font)
        self.rbtn_few.setObjectName("rbtn_few")
        self.horizontalLayout_8.addWidget(self.rbtn_few)
        self.rbtn_sometimes = QtWidgets.QRadioButton()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.rbtn_sometimes.setFont(font)
        self.rbtn_sometimes.setObjectName("rbtn_sometimes")
        self.horizontalLayout_8.addWidget(self.rbtn_sometimes)
        self.rbtn_usually = QtWidgets.QRadioButton()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.rbtn_usually.setFont(font)
        self.rbtn_usually.setObjectName("rbtn_usually")
        self.horizontalLayout_8.addWidget(self.rbtn_usually)
        self.rbtn_always = QtWidgets.QRadioButton()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.rbtn_always.setFont(font)
        self.rbtn_always.setObjectName("rbtn_always")
        self.horizontalLayout_8.addWidget(self.rbtn_always)
        self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.layoutNeedhelp = QtWidgets.QGroupBox()
        self.layoutNeedhelp.setLayout(self.horizontalLayout_8)
        self.layoutNeedhelp.setStyleSheet("border: 1px;")
        self.layout.addWidget(self.layoutNeedhelp)
        # self.layout.addLayout(self.horizontalLayout_8)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.lbl_participation = QtWidgets.QLabel()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_participation.setFont(font)
        self.lbl_participation.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_participation.setObjectName("lbl_participation")
        self.horizontalLayout_9.addWidget(self.lbl_participation)
        self.input_specialSit = QtWidgets.QPlainTextEdit()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.input_specialSit.setFont(font)
        self.input_specialSit.setObjectName("input_specialSit")
        self.horizontalLayout_9.addWidget(self.input_specialSit)
        self.layout.addLayout(self.horizontalLayout_9)
        # self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        # self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        # self.lbl_anxietySit = QtWidgets.QLabel()
        # font = QtGui.QFont()
        # font.setPointSize(14)
        # self.lbl_anxietySit.setFont(font)
        # self.lbl_anxietySit.setAlignment(QtCore.Qt.AlignCenter)
        # self.lbl_anxietySit.setObjectName("lbl_anxietySit")
        # self.horizontalLayout_10.addWidget(self.lbl_anxietySit)
        # self.input_anxietySit = QtWidgets.QPlainTextEdit()
        # font = QtGui.QFont()
        # font.setPointSize(14)
        # self.input_anxietySit.setFont(font)
        # self.input_anxietySit.setObjectName("input_anxietySit")
        # self.horizontalLayout_10.addWidget(self.input_anxietySit)
        # self.layout.addLayout(self.horizontalLayout_10)
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_11.addItem(spacerItem)
        self.btn_empty = QtWidgets.QPushButton()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_empty.sizePolicy().hasHeightForWidth())
        #self.btn_empty.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.btn_empty.setFont(font)
        self.btn_empty.setObjectName("btn_empty")
        self.btn_empty.clicked.connect(self.clearContent)
        self.horizontalLayout_11.addWidget(self.btn_empty)
        self.btn_insert = QtWidgets.QPushButton()
        self.btn_insert.setObjectName("btn_insert")
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_insert.sizePolicy().hasHeightForWidth())
        #self.btn_save.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)

        self.btn_update = QtWidgets.QPushButton()
        self.btn_update.setFont(font)
        self.btn_update.setObjectName("btn_update")
        self.btn_update.clicked.connect(self.updateRecord)
        self.btn_update.setEnabled(False) #預設無法點擊
        self.horizontalLayout_11.addWidget(self.btn_update)

        self.btn_insert.setFont(font)
        self.btn_insert.clicked.connect(self.insert)
        self.btn_insert.setObjectName("btn_insert")
        self.horizontalLayout_11.addWidget(self.btn_insert)
        self.layout.addLayout(self.horizontalLayout_11)

        self.retranslateUi()
        self.saveForm = self.returnTab1Data()
        # self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
        # self.test = QtWidgets.QGroupBox()
        # self.test.setLayout(self.horizontalLayout_8)
        # self.test.setStyleSheet("border: 1px solid red;")
        # self.layout.addWidget(self.test)
        # self.redWidget = QtGui.QFrame()
        # self.redWidget.setStyleSheet("#myWidget {background-color:red;}")
        # self.eraseWidget.setStyleSheet("#myWidget {background-color:red;}")  
        # self.eraseWidget = QtGui.QVBoxLayout()

        # testWidget.setLayout(testLayout)
        # self.saveForm = self.returnTab1Data()
        
        #用來清除radioButton
        self.group_interaction = QtWidgets.QButtonGroup()
        self.group_interaction.addButton(self.rbtn_conversation)
        self.group_interaction.addButton(self.rbtn_game)
        self.group_interaction.addButton(self.rbtn_narrative)       
        self.group_needHelp = QtWidgets.QButtonGroup()
        self.group_needHelp.addButton(self.rbtn_always)
        self.group_needHelp.addButton(self.rbtn_usually)
        self.group_needHelp.addButton(self.rbtn_sometimes)
        self.group_needHelp.addButton(self.rbtn_few)
        self.group_gender = QtWidgets.QButtonGroup()
        self.group_gender.addButton(self.rbtn_male)        
        self.group_gender.addButton(self.rbtn_female)
        self.group_recordType = QtWidgets.QButtonGroup()
        self.group_recordType.addButton(self.rbtn_otherEquip)
        self.group_recordType.addButton(self.rbtn_cellphone)
        self.group_recordType.addButton(self.rbtn_pen)
        self.group_recordType.addButton(self.rbtn_camera)

        self.importSingal = 0
        self.currentDoc_id = None

        self.setStyleSheet(open("QSS/Tab1.qss", "r").read())

    def retranslateUi(self, ):
        _translate = QtCore.QCoreApplication.translate
        self.lbl_title.setText(_translate("", "CLSA分析"))
        self.lbl_SLP.setText(_translate("", "收錄者："))
        self.lbl_caseName.setText(_translate("", "個案姓名："))
        self.lbl_caseID.setText(_translate("", "個案編號："))
        self.lbl_gender.setText(_translate("", "性別："))
        self.btn_search.setText(_translate("", "查詢個案並帶入"))
        self.rbtn_male.setText(_translate("", "男"))
        self.rbtn_female.setText(_translate("", "女"))
        self.lbl_recordDate.setText(_translate("", "收錄日期："))
        self.lbl_birthday.setText(_translate("", "生日："))
        self.lbl_scenario.setText(_translate("", "收錄情境："))
        self.lbl_location.setText(_translate("", "收錄地點："))
        self.lbl_inducement.setText(_translate("", "誘發題材："))
        self.lbl_recordDataName.setText(_translate("", "錄影／錄音檔名："))
        self.lbl_interType.setText(_translate("", "互動形式："))
        self.lbl_childTotalUtterNum.setText(_translate("", "兒童總語句數："))
        self.rbtn_conversation.setText(_translate("", "交談"))
        self.rbtn_game.setText(_translate("", "自由遊戲"))
        self.rbtn_narrative.setText(_translate("", "敘事"))
        self.lbl_validUtterNum.setText(_translate("", "有效語句數："))
        self.lbl_participants.setText(_translate("", "參與人員："))
        self.ckb_teacher.setText(_translate("", " 老師"))
        self.ckb_dad.setText(_translate("", "爸爸"))
        self.ckb_mom.setText(_translate("", "媽媽"))
        self.ckb_tester.setText(_translate("", "施測者"))
        self.ckb_others.setText(_translate("", " 其他"))
        self.lbl_equipment.setText(_translate("", "記錄方式："))
        self.rbtn_cellphone.setText(_translate("", "手機"))
        self.rbtn_pen.setText(_translate("", "錄音筆"))
        self.rbtn_camera.setText(_translate("", "攝影機"))
        self.rbtn_otherEquip.setText(_translate("", "其他錄音設備"))
        self.lbl_help.setText(_translate("", "需要引導協助："))
        self.rbtn_few.setText(_translate("", "很少 (幾乎不需要引導)"))
        self.rbtn_sometimes.setText(_translate("", "有時 (2~5次)"))
        self.rbtn_usually.setText(_translate("", "經常 (6~9次)"))
        self.rbtn_always.setText(_translate("", "總是"))
        self.lbl_participation.setText(_translate("", "配合參與度："))
        # self.lbl_anxietySit.setText(_translate("", "兒童焦慮情形："))
        self.btn_empty.setText(_translate("", "  清空欄位  "))
        self.btn_insert.setText(_translate("", "  新增一筆紀錄  "))
        self.btn_update.setText(_translate("", "  更新紀錄  "))

    # #接收來自Tab2的個案編號和日期並從資料庫查詢資料貼到Tab1
    # @QtCore.pyqtSlot(dict)
    # def getCaseIDAndDate(self, CaseIDAndDate) :
    #     Doc = database.DatabaseApi.findDoc(CaseIDAndDate['caseID'], CaseIDAndDate['date'])
    #     self.getDoc(Doc)
    #     self.saveForm = self.returnTab1Data()

    #接收來自Tab2的總語句數與有效語句數
    @QtCore.pyqtSlot(dict)
    def getUtterNum(self, utterance) :
        if utterance == None:
            return
        self.lbl_showTotalUtterNum.setText(str(utterance['totalUtterance']))
        self.lbl_showValidUtterNum.setText(str(utterance['validUtterance']))
        self.saveForm = self.returnTab1Data()

    #傳個案編號到Tab2
    @QtCore.pyqtSlot() 
    def sendCaseID(self, caseIDandDate):
        self.procStart.emit(caseIDandDate)
    
    #查詢個案編號並把個案資料貼到Tab1
    def searchCaseID(self): 
        caseData = database.DatabaseApi.findChildData(self.input_caseID.text())
        # print (caseData)
        if caseData:
            self.input_caseName.setText(caseData['name'])
            if caseData['gender'] == 'male':
                self.rbtn_male.setChecked(True)
            else :
                self.rbtn_female.setChecked(True)
            self.dateEdit_birthday.setDate(caseData['birthday'])
        else :
            informBox = QtWidgets.QMessageBox.information(self, '查詢','查無此個案編號', QtWidgets.QMessageBox.Ok)
        self.saveForm = self.returnTab1Data()

    #回傳現在Tab1的所有資料
    def returnTab1Data (self) :
        #判斷是男是女
        if self.rbtn_male.isChecked():
            gender = 'male'
        else :
            gender = 'female'

        #將dateEdit變成dateTime型態
        date = str(self.dateEdit_birthday.date().toPyDate())
        birthday = datetime.strptime(date, "%Y-%m-%d")

        #將dateEdit_3變成dateTime型態
        strDate = str(self.dateEdit_recordDate.dateTime().toPyDateTime())
        DateTimeDate = datetime.strptime(strDate, "%Y-%m-%d %H:%M:%S.%f")
        strRecordDate = DateTimeDate.strftime("%Y-%m-%d %H:%M:%S")
        DateTimeRecordDate = datetime.strptime(strRecordDate, "%Y-%m-%d %H:%M:%S")

        #判斷互動形式   
        interactionType = ''
        if self.rbtn_conversation.isChecked():
            interactionType = '交談'
        if self.rbtn_game.isChecked():
            interactionType = '自由遊戲'
        if self.rbtn_narrative.isChecked():
            interactionType = '敘事'
        
        #判斷記錄方式
        equipment = ''
        if self.rbtn_cellphone.isChecked():
            equipment = '手機'
        if self.rbtn_pen.isChecked():
            equipment = '錄音筆'
        if self.rbtn_otherEquip.isChecked():
            equipment = '其他錄音設備'
        if self.rbtn_camera.isChecked():
            equipment = '攝影機'

        #判斷需要引導協助
        needhelp = ''
        if self.rbtn_always.isChecked():
            needhelp = '總是'
        if self.rbtn_few.isChecked():
            needhelp = '很少 (幾乎不需要引導)'
        if self.rbtn_usually.isChecked():
            needhelp = '經常 (6~9次)'
        if self.rbtn_sometimes.isChecked():
            needhelp = '有時 (2~5次)'

        #判斷參與人員
        participants = []
        if self.ckb_dad.isChecked():
            participants.append("爸爸")
        if self.ckb_tester.isChecked():
            participants.append("施測者")
        if self.ckb_teacher.isChecked():
            participants.append("老師")
        if self.ckb_mom.isChecked():
            participants.append("媽媽")
        if self.ckb_others.isChecked() and self.input_others.text():
            participants.append(self.input_others.text())
        
        data = {
            'caseID' : self.input_caseID.text(),
            'name': self.input_caseName.text(),
            'gender' : gender,
            'birthday' : birthday,
            'date' : DateTimeRecordDate,
            'SLP': self.input_SLP.text(),
            'scenario': self.input_scenario.text(),
            'fileName' : self.input_recordDataName.text(),
            'location' : self.input_location.text(),
            'interactionType' : interactionType,
            'inducement' : self.input_inducement.text(),
            'participants' : participants,
            'equipment' :equipment,
            'help' : needhelp,
            'others' : self.input_specialSit.toPlainText(),
            # 'situation' : self.input_anxietySit.toPlainText()
        }
        return data

    #清除紅框
    def clearRedFrame (self) :
        self.input_SLP.setStyleSheet("border: 1px solid initial;" )
        self.input_caseID.setStyleSheet("border: 1px solid initial;" )
        self.input_caseName.setStyleSheet("border: 1px solid initial;" )
        self.dateEdit_birthday.setStyleSheet("border: 1px solid initial;" )
        self.rbtn_male.setStyleSheet("border: 1px;")
        self.rbtn_female.setStyleSheet("border: 1px;")   
        self.input_location.setStyleSheet("border: 1px solid initial;")
        self.input_scenario.setStyleSheet("border: 1px solid initial;")
        self.layoutInteraction.setStyleSheet("border: 1px; solid initial;")
        self.layoutParticipants.setStyleSheet("border: 1px;")
        self.input_others.setStyleSheet("border: 1px solid initial;")
        self.input_inducement.setStyleSheet("border: 1px solid initial;")
        self.input_specialSit.setStyleSheet("border: 1px solid initial;")
        self.layoutNeedhelp.setStyleSheet("border: 1px ")
    #回傳Tab1中的childData欄位資料
    def returnChildData(self):
        #將dateEdit_birthday變成dateTime型態
        date = str(self.dateEdit_birthday.date().toPyDate())
        birthday = datetime.strptime(date, "%Y-%m-%d")

        #判斷是男是女
        gender = ''
        if self.rbtn_male.isChecked():
            gender = 'male'
        else :
            gender = 'female'

        childData = {
            'caseID' : self.input_caseID.text(),
            'name': self.input_caseName.text(),
            'gender' : gender,
            'birthday' : birthday
        }
        return childData
    #回傳Tab1中的recording欄位資料
    def returnRecording(self) :
        #將dateEdit變成dateTime型態
        date = str(self.dateEdit_birthday.date().toPyDate())
        birthday = datetime.strptime(date, "%Y-%m-%d")

        #將dateEdit_3變成dateTime型態
        strDate = str(self.dateEdit_recordDate.dateTime().toPyDateTime())
        DateTimeDate = datetime.strptime(strDate, "%Y-%m-%d %H:%M:%S.%f")
        strRecordDate = DateTimeDate.strftime("%Y-%m-%d %H:%M:%S")
        DateTimeRecordDate = datetime.strptime(strRecordDate, "%Y-%m-%d %H:%M:%S")
    
        interactionType = ''
        #判斷互動形式
        if self.rbtn_conversation.isChecked():
            interactionType = '交談'
        if self.rbtn_game.isChecked():
            interactionType = '自由遊戲'
        if self.rbtn_narrative.isChecked():
            interactionType = '敘事'

        equipment = ''
        #判斷記錄方式
        if self.rbtn_cellphone.isChecked():
            equipment = '手機'
        if self.rbtn_pen.isChecked():
            equipment = '錄音筆'
        if self.rbtn_otherEquip.isChecked():
            equipment = '其他錄音設備'
        if self.rbtn_camera.isChecked():
            equipment = '攝影機'

        needhelp = ''
        #判斷需要引導協助
        if self.rbtn_always.isChecked():
            needhelp = '總是'
        if self.rbtn_few.isChecked():
            needhelp = '很少 (幾乎不需要引導)'
        if self.rbtn_usually.isChecked():
            needhelp = '經常 (6~9次)'
        if self.rbtn_sometimes.isChecked():
            needhelp = '有時 (2~5次)'

        #判斷參與人員
        participants = []
        if self.ckb_dad.isChecked():
            participants.append("爸爸")
        if self.ckb_tester.isChecked():
            participants.append("施測者")
        if self.ckb_teacher.isChecked():
            participants.append("老師")
        if self.ckb_mom.isChecked():
            participants.append("媽媽")
        if self.ckb_others.isChecked() and self.input_others.text():
            participants.append(self.input_others.text())
        
        recording = {
            'SLP': self.input_SLP.text(),
            'scenario': self.input_scenario.text(),
            'fileName' : self.input_recordDataName.text(),
            'location' : self.input_location.text(),
            'interactionType' : interactionType,
            'inducement' : self.input_inducement.text(),
            'participants' : participants,
            'equipment' :equipment,
            'help' : needhelp,
            'others' : self.input_specialSit.toPlainText(),
            'age': round((DateTimeDate - birthday).days / 365, 1)
        }
        return recording
    #新增資料到資料庫 
    def insert (self, event): 
        if (self.redFrameExamination()):
            #將dateEdit_recordDate變成dateTime型態
            strDate = str(self.dateEdit_recordDate.dateTime().toPyDateTime())
            DateTimeDate = datetime.strptime(strDate, "%Y-%m-%d %H:%M:%S.%f")
            strRecordDate = DateTimeDate.strftime("%Y-%m-%d %H:%M:%S")
            DateTimeRecordDate = datetime.strptime(strRecordDate, "%Y-%m-%d %H:%M:%S")

            childData = self.returnChildData()
            recording = self.returnRecording()
        
            if (database.DatabaseApi.canInsertDoc(self.input_caseID.text() , DateTimeRecordDate)):
                if (database.DatabaseApi.findChildData(self.input_caseID.text())):
                    checkChildData = database.DatabaseApi.findChildData(self.input_caseID.text())
                    del checkChildData['_id']
                    if checkChildData == childData :
                        self.currentDoc_id = database.DatabaseApi.insertRecording(self.input_caseID.text(), DateTimeRecordDate , recording)
                    else :
                        questionBox = QtWidgets.QMessageBox.question(self, 
                                    '更新','此個案資料已存在，請問是否要更新個案資料?',
                                    QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
                        if questionBox == QtWidgets.QMessageBox.Yes :
                            database.DatabaseApi.updateChildData(childData)
                            self.currentDoc_id = database.DatabaseApi.insertRecording(self.input_caseID.text(), DateTimeRecordDate , recording)
                        elif questionBox == QtWidgets.QMessageBox.No:
                            self.currentDoc_id = database.DatabaseApi.insertRecording(self.input_caseID.text(), DateTimeRecordDate , recording)
                else:
                    database.DatabaseApi.insertChildData(childData)
                    self.currentDoc_id = database.DatabaseApi.insertRecording(self.input_caseID.text(), DateTimeRecordDate , recording)
                
                if self.currentDoc_id:
                    informBox = QtWidgets.QMessageBox.information(self, '通知','新增成功', QtWidgets.QMessageBox.Ok)
                else:
                    informBox = QtWidgets.QMessageBox.information(self, '通知','新增失敗', QtWidgets.QMessageBox.Ok)
                caseIDandDate = {'_id': self.currentDoc_id, 'caseID':self.input_caseID.text(), 'date':DateTimeRecordDate}
                self.procStart.emit(caseIDandDate)
                self.procID.emit({'_id': self.currentDoc_id})
                self.btn_update.setEnabled(True)
                self.btn_insert.setEnabled(False)
            else :
                informBox = QtWidgets.QMessageBox.warning(self, '警告','這個時間點個案已經做過治療了，請修正收錄時間或是個案編號', QtWidgets.QMessageBox.Ok)
    #更新紀錄
    def updateRecord (self):
        if (self.redFrameExamination()):
             #將dateEdit_recordDate變成dateTime型態
            strDate = str(self.dateEdit_recordDate.dateTime().toPyDateTime())
            DateTimeDate = datetime.strptime(strDate, "%Y-%m-%d %H:%M:%S.%f")
            strRecordDate = DateTimeDate.strftime("%Y-%m-%d %H:%M:%S")
            DateTimeRecordDate = datetime.strptime(strRecordDate, "%Y-%m-%d %H:%M:%S")

            childData = self.returnChildData()
            recording = self.returnRecording()
        
            if (database.DatabaseApi.canUpdateDoc(self.input_caseID.text(), DateTimeRecordDate , self.currentDoc_id)):
                if (database.DatabaseApi.findChildData(self.input_caseID.text())):
                    checkChildData = database.DatabaseApi.findChildData(self.input_caseID.text())
                    del checkChildData['_id']
                    if childData == checkChildData :
                        updateSuccess = database.DatabaseApi.updateRecording(self.currentDoc_id , self.input_caseID.text() , DateTimeRecordDate , recording)
                    else:
                        questionBox = QtWidgets.QMessageBox.question(self, 
                                    '更新','此個案資料已存在，請問是否要更新個案資料?', 
                                    QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
                        if questionBox == QtWidgets.QMessageBox.Yes :
                            # a = {'key_1': 1,'key_2': 2, 'key_3': 3}
                            # b = {'key_1': 1,'key_2': 5}
                            # i=[k for k in b if k in a if b[k]!=a[k]]
                            # if i:
                            #     for k in i:
                            #         print('not equal:b[',k,']=',b[k],'and a[',k,']=',a[k])
                            database.DatabaseApi.updateChildData(childData)
                            updateSuccess = database.DatabaseApi.updateRecording(self.currentDoc_id , self.input_caseID.text() , DateTimeRecordDate , recording)
                        elif questionBox == QtWidgets.QMessageBox.No:
                            updateSuccess = database.DatabaseApi.updateRecording(self.currentDoc_id , self.input_caseID.text() , DateTimeRecordDate , recording)
                else :
                    questionBox = QtWidgets.QMessageBox.question(self, 
                                    '更新','此個案資料並不存在，請問是否要新增個案資料?', 
                                    QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
                    if questionBox == QtWidgets.QMessageBox.Yes :            
                        database.DatabaseApi.insertChildData(childData)
                        updateSuccess = database.DatabaseApi.updateRecording(self.currentDoc_id , self.input_caseID.text() , DateTimeRecordDate , recording)
                    else:
                        return
                if updateSuccess:
                    informBox = QtWidgets.QMessageBox.information(self, '通知','更新成功', QtWidgets.QMessageBox.Ok)
                else:
                    informBox = QtWidgets.QMessageBox.information(self, '通知','更新失敗', QtWidgets.QMessageBox.Ok)
                caseIDandDate = {'_id': self.currentDoc_id, 'caseID':self.input_caseID.text(), 'date':DateTimeRecordDate}
                self.procStart.emit(caseIDandDate)

            else :
                informBox = QtWidgets.QMessageBox.warning(self, '警告','這個時間點個案已經做過治療了，請修正收錄時間或是個案編號', QtWidgets.QMessageBox.Ok)
    def redFrameExamination(self):
        inputError = 0 
        ageError = 0
        otherError = 0

        #收錄者
        if not self.input_SLP.text(): 
            inputError+=1
            self.input_SLP.setStyleSheet("border: 1px solid red;" )
        else :
            self.input_SLP.setStyleSheet("border: 1px solid initial;" )
        
        #個案編號
        if not self.input_caseID.text(): 
            inputError+=1
            self.input_caseID.setStyleSheet("border: 1px solid red;" )
        else :
            self.input_caseID.setStyleSheet("border: 1px solid initial;" )
        
        #個案姓名
        if not self.input_caseName.text(): 
            inputError+=1
            self.input_caseName.setStyleSheet("border: 1px solid red;")
        else:
            self.input_caseName.setStyleSheet("border: 1px solid initial;" )
        
        #性別
        if not (self.rbtn_male.isChecked() or self.rbtn_female.isChecked()): 
            inputError += 1
            self.rbtn_male.setStyleSheet("border: 1px solid red;")
            self.rbtn_female.setStyleSheet("border: 1px solid red;")
        else:
            self.rbtn_male.setStyleSheet("border: 1px;")
            self.rbtn_female.setStyleSheet("border: 1px;")        
        #收錄地點
        if not self.input_location.text(): 
            inputError +=1
            self.input_location.setStyleSheet("border: 1px solid red;")
        else:
            self.input_location.setStyleSheet("border: 1px solid initial;")
        
        #收錄情境
        if not self.input_scenario.text(): 
            inputError += 1
            self.input_scenario.setStyleSheet("border: 1px solid red;")
        else :
            self.input_scenario.setStyleSheet("border: 1px solid initial;")
        
        #互動形式
        if not (self.rbtn_conversation.isChecked() or self.rbtn_game.isChecked() or self.rbtn_narrative.isChecked()):
            inputError += 1
            self.layoutInteraction.setStyleSheet("border: 1px solid red;")
            self.rbtn_conversation.setStyleSheet("border: 1px;")
            self.rbtn_game.setStyleSheet("border: 1px;")
            self.rbtn_narrative.setStyleSheet("border: 1px;")
            self.lbl_interType.setStyleSheet("border: 1px;")
        else :
            self.layoutInteraction.setStyleSheet("border: 1px;")
        
        #參與人員
        if not (self.ckb_dad.isChecked() or self.ckb_mom.isChecked() or self.ckb_teacher.isChecked() or self.ckb_tester.isChecked() or self.ckb_others.isChecked()):
            inputError +=1
            self.layoutParticipants.setStyleSheet("border: 1px solid red;")
            self.lbl_participants.setStyleSheet("border: 1px;")
            self.ckb_dad.setStyleSheet("border: 1px;")
            self.ckb_mom.setStyleSheet("border: 1px;")
            self.ckb_teacher.setStyleSheet("border: 1px;")
            self.ckb_tester.setStyleSheet("border: 1px;")
            self.ckb_others.setStyleSheet("border: 1px;")    
            self.input_others.setStyleSheet("border: 1px solid initial;")
        else :
            if (self.ckb_others.isChecked() and not(self.input_others.text())):
                inputError +=1
                otherError = 1
            else:
                self.layoutParticipants.setStyleSheet("border: 1px;")
                self.input_others.setStyleSheet("border: 1px solid initial;")

        #誘發題材
        if not self.input_inducement.text():
            inputError += 1
            self.input_inducement.setStyleSheet("border: 1px solid red;")
        else :
            self.input_inducement.setStyleSheet("border: 1px solid initial;")

        
        #其他特殊情況
        if not self.input_specialSit.toPlainText():
            inputError +=1
            self.input_specialSit.setStyleSheet("border: 1px solid red;")
        else :
            self.input_specialSit.setStyleSheet("border: 1px solid initial;")

        #需要引導協助
        if not (self.rbtn_always.isChecked()  or self.rbtn_usually.isChecked() or self.rbtn_sometimes.isChecked() or self.rbtn_few.isChecked()):
            inputError +=1
            self.layoutNeedhelp.setStyleSheet("border: 1px solid red;")
            self.lbl_help.setStyleSheet("border: 1px;")
            self.rbtn_always.setStyleSheet("border: 1px;")
            self.rbtn_usually.setStyleSheet("border: 1px;")
            self.rbtn_sometimes.setStyleSheet("border: 1px;")
            self.rbtn_few.setStyleSheet("border: 1px;")
        else :
            self.layoutNeedhelp.setStyleSheet("border: 1px;")

        #年齡判定
        today = datetime.today()
        #將dateEdit變成dateTime型態
        date = str(self.dateEdit_birthday.date().toPyDate())
        birthday = datetime.strptime(date, "%Y-%m-%d")
        age = today.year - birthday.year - ((today.month, today.day) < (birthday.month, birthday.day))
        if age >= 13 and age <2:
            self.dateEdit_birthday.setStyleSheet("border: 1px solid red;")
            inputError += 1
            ageError = 1
        else:
            self.dateEdit_birthday.setStyleSheet("border: 1px solid initial;")

        #如果有必填欄位沒填跳提示視窗
        if  inputError > 0 : 
            self.saveForm = self.returnTab1Data()
            warnText = '紅色框為必填欄位\n'
            if ageError > 0:
                warnText += '請確認生日日期與收錄日期是否正確(經計算個案年齡已超過13歲)\n'
            if otherError > 0:
                warnText += '其他欄位有勾選但未填值'
            informBox = QtWidgets.QMessageBox.warning(self, '警告',warnText, QtWidgets.QMessageBox.Ok)
            return False
        else :
            return True

    #檢查是否有變更
    def isEdit (self) :
        tab1Changed = self.returnTab1Data()
        if tab1Changed == self.saveForm :
            return False
        else :
            return True 

    #接收來自Tab0的所有資料
    @QtCore.pyqtSlot(dict)
    def getDoc(self, Doc):
        self.importSingal = 1
        self.currentDoc_id = Doc['_id']
        self.btn_update.setEnabled(True)
        #設定childData
        if Doc == None:
            return
        self.lbl_showTotalUtterNum.setText(str(Doc['transcription']['totalUtterance']))
        self.lbl_showValidUtterNum.setText(str(Doc['transcription']['validUtterance']))
        self.input_caseID.setText(Doc['childData']['caseID'])
        self.input_caseName.setText(Doc['childData']['name'])
        if Doc['childData']['gender'] == 'male':
            self.rbtn_male.setChecked(True)
        else :
            self.rbtn_female.setChecked(True)
        self.dateEdit_birthday.setDate(Doc['childData']['birthday'])

        #設定recording
        strDate = Doc['date'].strftime("%Y-%m-%d %H:%M:%S")
        Date = strDate + '.224000'
        DateTimeDate = datetime.strptime(Date, "%Y-%m-%d %H:%M:%S.%f")
        self.dateEdit_recordDate.setDateTime(DateTimeDate)

        self.input_SLP.setText(Doc['recording']['SLP'])
        self.input_scenario.setText(Doc['recording']['scenario'])
        self.input_recordDataName.setText(Doc['recording']['fileName'])
        self.input_location.setText(Doc['recording']['location'])
        if Doc['recording']['interactionType'] == '交談':
            self.rbtn_conversation.setChecked(True)
        if Doc['recording']['interactionType'] == '自由遊戲':
            self.rbtn_game.setChecked(True)
        if Doc['recording']['interactionType'] == '敘事' :
            self.rbtn_narrative.setChecked(True)

        self.input_inducement.setText(Doc['recording']['inducement'])
        
        if Doc['recording']['equipment'] == '手機':
            self.rbtn_cellphone.setChecked(True)
        if Doc['recording']['equipment'] == '其他錄音設備':
            self.rbtn_otherEquip.setChecked(True)
        if Doc['recording']['equipment'] == '錄音筆' :
            self.rbtn_pen.setChecked(True)
        if Doc['recording']['equipment'] == '攝影機' :
            self.rbtn_camera.setChecked(True)
        
        if Doc['recording']['help'] == '總是':
            self.rbtn_always.setChecked(True)
        if Doc['recording']['help'] == '很少 (幾乎不需要引導)':
            self.rbtn_few.setChecked(True)
        if Doc['recording']['help'] == '經常 (6~9次)':
            self.rbtn_usually.setChecked(True)
        if Doc['recording']['help'] == '有時 (2~5次)':
            self.rbtn_sometimes.setChecked(True)
        self.input_specialSit.setPlainText(Doc['recording']['others'])
        # self.input_anxietySit.setPlainText(Doc['recording']['situation'])

        for i in Doc['recording']['participants'] :
            if i == '爸爸' :
                self.ckb_dad.setChecked(True)
            elif i == '施測者' :
                self.ckb_tester.setChecked(True)
            elif i == '老師' :
                self.ckb_teacher.setChecked(True)
            elif i == '媽媽' :
                self.ckb_mom.setChecked(True)
            else :
                self.ckb_others.setChecked(True)
                self.input_others.setText(i)
        self.saveForm = self.returnTab1Data()

    @QtCore.pyqtSlot()
    def clearContent(self) :
        self.clearRedFrame()
        self.importSingal = 0
        self.currentDoc_id = None
        self.btn_update.setEnabled(False)
        self.input_caseID.setText('')
        self.input_caseName.setText('')
        self.input_location.setText('')
        self.input_scenario.setText('')
        self.input_SLP.setText('')
        self.input_recordDataName.setText('')
        self.input_inducement.setText('')
        self.input_others.setText('')

        # self.input_anxietySit.setPlainText('')
        self.input_specialSit.setPlainText('')
 
        self.ckb_dad.setChecked(False)
        self.ckb_mom.setChecked(False)
        self.ckb_others.setChecked(False)
        self.ckb_teacher.setChecked(False)
        self.ckb_tester.setChecked(False)

        self.group_gender.setExclusive(False)
        self.rbtn_male.setChecked(False)
        self.rbtn_female.setChecked(False)
        self.group_gender.setExclusive(True)

        self.group_interaction.setExclusive(False)
        self.rbtn_conversation.setChecked(False)
        self.rbtn_game.setChecked(False)
        self.rbtn_narrative.setChecked(False)
        self.group_interaction.setExclusive(True)

        self.group_recordType.setExclusive(False)
        self.rbtn_camera.setChecked(False)
        self.rbtn_cellphone.setChecked(False)
        self.rbtn_pen.setChecked(False)
        self.rbtn_otherEquip.setChecked(False)
        self.group_recordType.setExclusive(True)
        
        self.group_needHelp.setExclusive(False)
        self.rbtn_always.setChecked(False)
        self.rbtn_usually.setChecked(False)
        self.rbtn_sometimes.setChecked(False)
        self.rbtn_few.setChecked(False)
        self.group_needHelp.setExclusive(True)

        self.dateEdit_recordDate.setDateTime(QtCore.QDateTime.currentDateTime())
        self.dateEdit_birthday.setDate(QtCore.QDate(2000, 1, 1))
        self.lbl_showTotalUtterNum.setText('')
        self.lbl_showValidUtterNum.setText('')
        self.saveForm =self.returnTab1Data()
        self.procClear.emit()

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    ui = Myform()
    ui.show()
    sys.exit(app.exec_())
