# -*- coding: utf-8 -*-

#  implementation generated from reading ui file 'c:\Users\fuhan\Desktop\NLP\CLSA\Tab2.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
import os
import re
import database.DatabaseApi
from components.Mytable import Mytable
from functools import partial
from PyQt5 import QtCore, QtGui, QtWidgets
from utils.audio import STT
from utils.worker import Worker
from collections import OrderedDict
import qtawesome as qta


class Tab2(QtWidgets.QWidget):
    procUtterNum = QtCore.pyqtSignal(dict)
    procChildUtter = QtCore.pyqtSignal(list)
    procKey = QtCore.pyqtSignal(dict)
    procMain = QtCore.pyqtSignal(int, float)
    procEdit = QtCore.pyqtSignal()
    procClear = QtCore.pyqtSignal()
    procAdultID = QtCore.pyqtSignal(dict)

    def __init__(self):
        super(Tab2, self).__init__()

        layout = QtWidgets.QVBoxLayout()
        self.setLayout(layout)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setContentsMargins(0, 0, 0, 7)
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.lbl_trans = QtWidgets.QLabel()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_trans.sizePolicy().hasHeightForWidth())
        self.lbl_trans.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_trans.setFont(font)
        self.lbl_trans.setObjectName("lbl_trans")
        self.horizontalLayout.addWidget(self.lbl_trans)
        self.input_trans = QtWidgets.QLineEdit()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.input_trans.sizePolicy().hasHeightForWidth())
        self.input_trans.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.input_trans.setFont(font)
        self.input_trans.setObjectName("input_trans")
        self.horizontalLayout.addWidget(self.input_trans)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.lbl_caseID = QtWidgets.QLabel()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_caseID.sizePolicy().hasHeightForWidth())
        self.lbl_caseID.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_caseID.setFont(font)
        self.lbl_caseID.setObjectName("lbl_caseID")
        self.horizontalLayout.addWidget(self.lbl_caseID)
        self.lbl_impCaseID = QtWidgets.QLabel()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_impCaseID.sizePolicy().hasHeightForWidth())
        self.lbl_impCaseID.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_impCaseID.setFont(font)
        self.lbl_impCaseID.setObjectName("lbl_impCaseID")
        self.horizontalLayout.addWidget(self.lbl_impCaseID)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        layout.addLayout(self.horizontalLayout)
        self.line = QtWidgets.QFrame()
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        layout.addWidget(self.line)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setContentsMargins(0, 7, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setSpacing(20)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setSpacing(5)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.lbl_caseDate = QtWidgets.QLabel()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_caseDate.sizePolicy().hasHeightForWidth())
        self.lbl_caseDate.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_caseDate.setFont(font)
        self.lbl_caseDate.setText("")
        self.lbl_caseDate.setObjectName("lbl_caseDate")
        self.lbl_caseDate.setVisible(False)
        self.lbl_caseDate.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout_6.addWidget(self.lbl_caseDate)
        self.verticalLayout_3.addLayout(self.verticalLayout_6)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setSpacing(2)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.icon = QtWidgets.QLabel()
        self.icon.setPixmap(qta.icon('fa.info-circle',color='#eed202').pixmap(QtCore.QSize(20, 20)))
        self.icon.setMaximumSize(QtCore.QSize(20, 20))
        self.horizontalLayout_8.addWidget(self.icon)
        self.lbl_rolePrompt = QtWidgets.QLabel()
        self.lbl_rolePrompt.setObjectName("lbl_rolePrompt")
        self.horizontalLayout_8.addWidget(self.lbl_rolePrompt)
        self.verticalLayout_5.addLayout(self.horizontalLayout_8)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.lbl_role = QtWidgets.QLabel()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_role.sizePolicy().hasHeightForWidth())
        self.lbl_role.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_role.setFont(font)
        self.lbl_role.setObjectName("lbl_role")
        self.horizontalLayout_3.addWidget(self.lbl_role)
        self.cmb_role = QtWidgets.QComboBox()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cmb_role.sizePolicy().hasHeightForWidth())
        self.cmb_role.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.cmb_role.setFont(font)
        self.cmb_role.setEditable(True)
        self.cmb_role.lineEdit().setFont(font)
        self.cmb_role.setObjectName("cmb_role")
        self.cmb_role.addItem("")
        self.cmb_role.addItem("")
        self.horizontalLayout_3.addWidget(self.cmb_role)
        self.verticalLayout_5.addLayout(self.horizontalLayout_3)
        self.verticalLayout_3.addLayout(self.verticalLayout_5)
        self.horizontalLayout_2.addLayout(self.verticalLayout_3)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setSpacing(20)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.lbl_utterance = QtWidgets.QLabel()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_utterance.sizePolicy().hasHeightForWidth())
        self.lbl_utterance.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_utterance.setFont(font)
        self.lbl_utterance.setObjectName("lbl_utterance")
        self.horizontalLayout_5.addWidget(self.lbl_utterance)
        self.input_utterance = QtWidgets.QLineEdit()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.input_utterance.sizePolicy().hasHeightForWidth())
        self.input_utterance.setSizePolicy(sizePolicy)
        self.input_utterance.setMinimumSize(QtCore.QSize(700, 0))
        self.input_utterance.setMaximumSize(QtCore.QSize(700, 16777215))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.input_utterance.setFont(font)
        self.input_utterance.setObjectName("input_utterance")
        self.horizontalLayout_5.addWidget(self.input_utterance)
        self.verticalLayout_2.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.lbl_scenario = QtWidgets.QLabel()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_scenario.sizePolicy().hasHeightForWidth())
        self.lbl_scenario.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_scenario.setFont(font)
        self.lbl_scenario.setObjectName("lbl_scenario")
        self.horizontalLayout_6.addWidget(self.lbl_scenario)
        self.input_scenario = QtWidgets.QLineEdit()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.input_scenario.sizePolicy().hasHeightForWidth())
        self.input_scenario.setSizePolicy(sizePolicy)
        self.input_scenario.setMinimumSize(QtCore.QSize(700, 0))
        self.input_scenario.setMaximumSize(QtCore.QSize(700, 16777215))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.input_scenario.setFont(font)
        self.input_scenario.setObjectName("input_scenario")
        self.horizontalLayout_6.addWidget(self.input_scenario)
        self.verticalLayout_2.addLayout(self.horizontalLayout_6)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.cbx_notCount = QtWidgets.QCheckBox()
        font = QtGui.QFont()
        font.setPointSize(14)
        self.cbx_notCount.setFont(font)
        self.cbx_notCount.setObjectName("cbx_notCount")
        self.verticalLayout_4.addWidget(self.cbx_notCount)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.btn_add = QtWidgets.QPushButton()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_add.sizePolicy().hasHeightForWidth())
        self.btn_add.setSizePolicy(sizePolicy)
        self.btn_add.setMinimumSize(QtCore.QSize(101, 51))
        self.btn_add.setMaximumSize(QtCore.QSize(101, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.btn_add.setFont(font)
        self.btn_add.setObjectName("btn_add")
        self.horizontalLayout_7.addWidget(self.btn_add)
        self.btn_importAudio = QtWidgets.QPushButton()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_add.sizePolicy().hasHeightForWidth())
        self.btn_importAudio.setSizePolicy(sizePolicy)
        self.btn_importAudio.setMinimumSize(QtCore.QSize(150, 51))
        self.btn_importAudio.setMaximumSize(QtCore.QSize(150, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.btn_importAudio.setFont(font)
        self.btn_importAudio.setObjectName("btn_importAudio")
        self.horizontalLayout_7.addWidget(self.btn_importAudio)
        self.verticalLayout_4.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_2.addLayout(self.verticalLayout_4)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.tableWidget = Mytable()
        Mytable.__init__(self.tableWidget)
        self.verticalLayout.addWidget(self.tableWidget)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setContentsMargins(-1, -1, -1, 7)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem3)
        self.btn_delete = QtWidgets.QPushButton()
        self.btn_delete.setMinimumSize(QtCore.QSize(101, 51))
        self.btn_delete.setMaximumSize(QtCore.QSize(101, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.btn_delete.setFont(font)
        self.btn_delete.setObjectName("btn_delete")
        self.btn_delete.setToolTip("選取整列並刪除")
        self.horizontalLayout_4.addWidget(self.btn_delete)
        self.btn_clearTab = QtWidgets.QPushButton()
        self.btn_clearTab.setMinimumSize(QtCore.QSize(115, 51))
        self.btn_clearTab.setMaximumSize(QtCore.QSize(115, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.btn_clearTab.setFont(font)
        self.btn_clearTab.setObjectName("btn_clearTab")
        self.horizontalLayout_4.addWidget(self.btn_clearTab)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem4)
        self.btn_save = QtWidgets.QPushButton()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_save.sizePolicy().hasHeightForWidth())
        self.btn_save.setSizePolicy(sizePolicy)
        self.btn_save.setMinimumSize(QtCore.QSize(101, 51))
        self.btn_save.setMaximumSize(QtCore.QSize(101, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.btn_save.setFont(font)
        self.btn_save.setObjectName("btn_save")
        self.horizontalLayout_4.addWidget(self.btn_save)
        self.btn_generateAndSave = QtWidgets.QPushButton()
        self.btn_generateAndSave.setMinimumSize(QtCore.QSize(225, 51))
        self.btn_generateAndSave.setMaximumSize(QtCore.QSize(225, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.btn_generateAndSave.setFont(font)
        self.btn_generateAndSave.setObjectName("btn_generateAndSave")
        self.horizontalLayout_4.addWidget(self.btn_generateAndSave)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem5)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        layout.addLayout(self.verticalLayout)
        layout.setStretch(1, 1)
        layout.setStretch(2, 2)

        self.retranslateUi()
        #QtCore.QMetaObject.connectSlotsByName()

        #事件
        self.btn_add.clicked.connect(self._addRow)
        self.btn_importAudio.clicked.connect(self._tranferAudio)
        self.input_utterance.returnPressed.connect(self._addRow)
        self.input_scenario.returnPressed.connect(self._addRow)
        self.btn_delete.clicked.connect(self._deleteRow)
        self.btn_clearTab.clicked.connect(partial(self.clearTab, False))
        self.btn_save.clicked.connect(partial(self._save, True))
        self.btn_generateAndSave.clicked.connect(self._generateAndSave)
        self.tableWidget.tableWidget.cellClicked.connect(self._syncTableCmbRoleNum)

        #signal
        self.tableWidget.procAllID.connect(self.getAllID)
        self.tableWidget.procChange.connect(self.roleChangeCheck)
        self.tableWidget.procInsertRow_editAdultID_setColor.connect(self.insertRow_editAdultID_setColor)

        self.caseID = ''    #個案編號
        self.isCase = False #是否已有個案在轉錄表
        self.caseData = {}  #用caseID查的個案紀錄{'dates', 'transcriber', 'FirstContent'}
        self.content = []   #查詢到、已儲存的內容
        self.transcriber = ''
        self.childNum = 0   #兒童編號
        self.adultNums = {}  #成人編號
        self.childUtterance = []    #兒童語句
        self.caseDate = None     #目前記錄日期
        self.cwd = os.getcwd() #目前檔案位置
        self.audio = STT()

        #尚未匯入個案，將各物件鎖住
        self.input_trans.setEnabled(False)
        self.cmb_role.setEnabled(False)
        self.input_utterance.setEnabled(False)
        self.input_scenario.setEnabled(False)
        self.cbx_notCount.setEnabled(False)
        self.btn_add.setEnabled(False)
        self.btn_importAudio.setEnabled(False)
        self.btn_delete.setEnabled(False)
        self.btn_clearTab.setEnabled(False)
        self.btn_save.setEnabled(False)
        self.btn_generateAndSave.setEnabled(False)

        #視窗
        #編號不是輸入字母
        self.msg_roleNotAlpha = QtWidgets.QMessageBox()
        self.msg_roleNotAlpha.setWindowTitle("提示")
        self.msg_roleNotAlpha.setText("編號只能輸入英文！")
        self.msg_roleNotAlpha.setIcon(QtWidgets.QMessageBox.Warning)
        # self.msg_roleNotAlpha.setStyleSheet("QMessageBox {background-color: white;} QPushButton {border: 2px outset #CCCCCC; border-radius: 10px; width: 70; background-color: white;} QPushButton:pressed {border: 2px inset #CCCCCC;}")
        #未輸入語句
        self.msg_noInp = QtWidgets.QMessageBox()
        self.msg_noInp.setWindowTitle("提示")
        self.msg_noInp.setText("請輸入語句！")
        self.msg_noInp.setIcon(QtWidgets.QMessageBox.Question)
        # self.msg_noInp.setStyleSheet("QMessageBox {background-color: white;} QPushButton {border: 2px outset #CCCCCC; border-radius: 10px; width: 70; background-color: white;} QPushButton:pressed {border: 2px inset #CCCCCC;}")
        #未輸入語境
        self.msg_noScenario = QtWidgets.QMessageBox()
        self.msg_noScenario.setWindowTitle('提示')
        self.msg_noScenario.setText('請輸入語境！')
        self.msg_noScenario.setIcon(QtWidgets.QMessageBox.Question)
        # self.msg_noScenario.setStyleSheet("QMessageBox {background-color: white;} QPushButton {border: 2px outset #CCCCCC; border-radius: 10px; width: 70; background-color: white;} QPushButton:pressed {border: 2px inset #CCCCCC;}")
        #未輸入轉錄者
        self.msg_noTrans = QtWidgets.QMessageBox()
        self.msg_noTrans.setWindowTitle('提示')
        self.msg_noTrans.setText('未輸入轉錄者！')
        self.msg_noTrans.setIcon(QtWidgets.QMessageBox.Warning)
        # self.msg_noTrans.setStyleSheet("QMessageBox {background-color: white;} QPushButton {border: 2px outset #CCCCCC; border-radius: 10px; width: 70; background-color: white;} QPushButton:pressed {border: 2px inset #CCCCCC;}")
        #未選取刪除列
        self.msg_deleteNotSelect = QtWidgets.QMessageBox()
        self.msg_deleteNotSelect.setWindowTitle("提示")
        self.msg_deleteNotSelect.setText("請選取至少一整列刪除！")
        self.msg_deleteNotSelect.setIcon(QtWidgets.QMessageBox.Warning)
        # self.msg_deleteNotSelect.setStyleSheet("QMessageBox {background-color: white;} QPushButton {border: 2px outset #CCCCCC; border-radius: 10px; width: 70; background-color: white;} QPushButton:pressed {border: 2px inset #CCCCCC;}")
        #儲存完成
        self.msg_save = QtWidgets.QMessageBox()
        self.msg_save.setWindowTitle("提示")
        self.msg_save.setText("儲存完成！")
        self.msg_save.setIcon(QtWidgets.QMessageBox.Information)
        # self.msg_save.setStyleSheet("QMessageBox {background-color: white;} QPushButton {border: 2px outset #CCCCCC; border-radius: 10px; width: 70; background-color: white;} QPushButton:pressed {border: 2px inset #CCCCCC;}")
        #尚未儲存
        self.msg_notSave = QtWidgets.QMessageBox()
        self.msg_notSave.setWindowTitle("提示")
        self.msg_notSave.setText("更動內容尚未儲存！")
        self.msg_notSave.setInformativeText("要儲存嗎？")
        self.msg_notSave.setIcon(QtWidgets.QMessageBox.Information)
        self.msg_notSave.setStandardButtons(QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Cancel)
        # self.msg_notSave.setStyleSheet("QMessageBox {background-color: white;} QPushButton {border: 2px outset #CCCCCC; border-radius: 10px; width: 70; background-color: white;} QPushButton:pressed {border: 2px inset #CCCCCC;}")

        # self.setStyleSheet(open("C:/Users/HAO/Desktop/Code/Python/CLSA/QSS/Tab2.qss", "r").read())
        self.setStyleSheet(open("QSS/Tab2.qss", "r").read())

    def retranslateUi(self, ):
        _translate = QtCore.QCoreApplication.translate
        self.lbl_trans.setText(_translate("", "轉錄者："))
        self.lbl_caseID.setText(_translate("", "個案編號："))
        #self.btn_searchCase.setText(_translate("", "查詢"))
        self.lbl_rolePrompt.setText(_translate("", "成人請自行輸入英文編號 ex: A, B"))
        self.lbl_role.setText(_translate("", "編號："))
        self.cmb_role.setItemText(0, _translate("Form", "兒童"))
        self.cmb_role.setItemText(1, _translate("Form", "語境"))
        self.lbl_utterance.setText(_translate("", "語句："))
        self.lbl_scenario.setText(_translate("", "語境："))
        self.cbx_notCount.setText(_translate("", "此句不採計"))
        self.btn_add.setText(_translate("", "新增"))
        self.btn_importAudio.setText(_translate("", "匯入錄音檔"))
        self.btn_delete.setText(_translate("", "刪除列"))
        self.btn_clearTab.setText(_translate("", "全部清空"))
        self.btn_save.setText(_translate("", "儲存"))
        self.btn_generateAndSave.setText(_translate("", "產生彙整表並儲存"))

    #接收tab0接收查詢的資料
    @QtCore.pyqtSlot(dict)
    def getDoc(self, doc):
        self.clearTab(True)
        self._importCase(doc['childData']['caseID'], doc['date'])

    #從Tab1接收個案編號和日期
    @QtCore.pyqtSlot(dict)
    def setCaseRecord(self, caseIDAndDate):
        self.clearTab(True)
        self._importCase(caseIDAndDate['caseID'], caseIDAndDate['date'])

    #傳總語句數和有效語句數給Tab1
    @QtCore.pyqtSlot()
    def emitUtterNum(self, utteranceNum):
        self.procUtterNum.emit(utteranceNum)

    #傳孩童語句給Tab3
    @QtCore.pyqtSlot()
    def emitChildUtter(self, utterance):
        self.procChildUtter.emit(utterance)

    #傳個案編號、日期給Tab1和Tab3
    @QtCore.pyqtSlot()
    def emitKey(self, key):
        self.procKey.emit(key)

    #Table插入列或更改成編號後加上顏色
    @QtCore.pyqtSlot()
    def insertRow_editAdultID_setColor(self):
        self._setColumnColor()

    #Table角色切換
    @QtCore.pyqtSlot()
    def roleChangeCheck(self):
        self._syncTableCmbRoleNum()
        self._setColumnColor()

    #從Table拿兒童、成人編號
    @QtCore.pyqtSlot(dict)
    def getAllID(self, IDDict):
        self.childNum = IDDict['childID']
        self.adultNums = IDDict['adultID']

    #清空、復原輸入欄
    @QtCore.pyqtSlot()
    def clearInput(self):
        self.cmb_role.setCurrentIndex(0)
        self.input_utterance.clear()
        self.input_scenario.clear()
        self.cbx_notCount.setChecked(False)
        self._setInpBorderColorAndJumpMsg(None)

    #全部清空
    @QtCore.pyqtSlot()
    def clearTab(self, isAllClear):
        self.clearInput()
        self.caseData = {}
        self.content = []
        self.childNum = 0
        self.adultNums = {}
        self.childUtterance = []
        self.caseDate = None
        self.cmb_role.clear()
        self.cmb_role.addItem("兒童")
        self.cmb_role.addItem("語境")
        self.tableWidget.tableWidget.setRowCount(0)
        self.lbl_caseDate.setVisible(False)

        if isAllClear:
            self.caseID = ''
            self.transcriber = ''
            self.input_trans.clear()
            self.lbl_impCaseID.clear()

        #讓Tab3也clear
        self.procClear.emit()

    def _setWidgetEnabled(self):
        self.input_trans.setEnabled(True)
        self.cmb_role.setEnabled(True)
        self.input_utterance.setEnabled(True)
        self.input_scenario.setEnabled(True)
        self.cbx_notCount.setEnabled(True)
        self.btn_add.setEnabled(True)
        self.btn_importAudio.setEnabled(True)
        self.btn_delete.setEnabled(True)
        self.btn_clearTab.setEnabled(True)
        self.btn_save.setEnabled(True)
        self.btn_generateAndSave.setEnabled(True)

    def _setTableChildIDUneditable(self):
        rows = self.tableWidget.tableWidget.rowCount()
        for i in range(rows):
            item = self.tableWidget.tableWidget.item(i,3)
            item.setFlags(item.flags() & ~QtCore.Qt.ItemIsEditable)

    #將欄位邊框設成紅色並跳出提示視窗
    def _setInpBorderColorAndJumpMsg(self, opt):
        #復原所有欄位邊框顏色
        self.input_trans.setStyleSheet("border: 1px solid initial;")
        self.input_utterance.setStyleSheet("border: 1px solid initial;")
        self.input_scenario.setStyleSheet("border: 1px solid initial;")

        if opt == 'NoUtter':
            self.msg_noInp.exec_()    #跳出提示視窗
            self.input_utterance.setStyleSheet("border: 1px solid red;")    #將語句欄邊框設成紅色
        if opt == 'NoScenario':
            self.msg_noScenario.exec_() #跳出提示視窗
            self.input_scenario.setStyleSheet("border: 1px solid red;")     #將語境欄邊框設成紅色
        if opt == 'NoTrans':
            self.msg_noTrans.exec_()
            self.input_trans.setStyleSheet("border: 1px solid red;")        #將轉錄者欄邊框設成紅色

    #更新編號選單
    def _updateCmbRole(self):
        self.cmb_role.clear()
        self.cmb_role.addItem("兒童")
        self.cmb_role.addItem("語境")
        self.adultNums = OrderedDict(sorted(self.adultNums.items()))    #排序
        for i in self.adultNums:
            self.cmb_role.addItem(i)

    #檢查是否為空的一列
    def _checkEmptyRow(self, rowData):
        if rowData['ID'] == '' and rowData['role'] == '' and rowData['utterance'] == '' and rowData['scenario'] == '':
            return True
        return False

    #取得目前content
    def _getCurrentContent(self):
        content = []
        for rowIndex in range(self.tableWidget.tableWidget.rowCount()):
            adultID = self.tableWidget.tableWidget.item(rowIndex, 0)
            adultUtter = self.tableWidget.tableWidget.item(rowIndex, 1)
            scenario = self.tableWidget.tableWidget.item(rowIndex, 2)
            childID = self.tableWidget.tableWidget.item(rowIndex, 3)
            childUtter = self.tableWidget.tableWidget.item(rowIndex, 4)
            data = {'ID': '', 'role': '', 'utterance': '', 'scenario': ''}

            #adult
            if adultUtter and not adultUtter.text() == '':
                if adultID == None:
                    item = QtWidgets.QTableWidgetItem()
                    item.setText('')
                    self.tableWidget.tableWidget.setItem(rowIndex, 0, item)
                data['ID'] = adultID.text()
                data['role'] = 'adult'
                data['utterance'] = self.tableWidget.tableWidget.item(rowIndex, 1).text()
            #child
            elif childUtter and not childUtter.text() == '':
                if childID == None:
                    item = QtWidgets.QTableWidgetItem()
                    item.setText('')
                    self.tableWidget.tableWidget.setItem(rowIndex, 3, item)
                data['ID'] = childID.text()
                data['role'] = 'child'
                data['utterance'] = self.tableWidget.tableWidget.item(rowIndex, 4).text()
            if scenario == None:
                item = QtWidgets.QTableWidgetItem()
                item.setText('')
                self.tableWidget.tableWidget.setItem(rowIndex, 2, item)
            data['scenario'] = self.tableWidget.tableWidget.item(rowIndex, 2).text()

            if self._checkEmptyRow(data):
                continue
            content.append(data)

        return content

    #set table
    def _setTable(self, content):
        #清空table
        self.tableWidget.tableWidget.setRowCount(0)
        self.childNum = 0       #兒童編號
        self.adultNums = {}     #成人編號

        for i in range(len(content)):
            if self._checkEmptyRow(content[i]):
                continue
            
            rowCount = self.tableWidget.tableWidget.rowCount()    #取得目前總列數
            self.tableWidget.tableWidget.insertRow(rowCount)  #插入一列

            for columnIndex in range(5):
                if self.tableWidget.tableWidget.item(rowCount, columnIndex) == None:
                    self.tableWidget.tableWidget.setItem(rowCount, columnIndex, QtWidgets.QTableWidgetItem(''))
            
            utterance = QtWidgets.QTableWidgetItem(content[i]["utterance"])
            scenario = QtWidgets.QTableWidgetItem(content[i]["scenario"])

            if content[i]["role"] == "adult":  #成人
                if content[i]["ID"]:   #如果有編號(有採計)
                    pattern = r"[a-zA-Z]+"
                    key = re.search(pattern,content[i]["ID"]).group()
                    if not key in self.adultNums:  #新的成人編號
                        self.adultNums[key] = 1
                        self._updateCmbRole()  #更新編號選單
                    else:   #已有的成人編號
                        self.adultNums[key] += 1
                else:
                    font = utterance.font()
                    font.setBold(True)
                    utterance.setFont(font)
                role = QtWidgets.QTableWidgetItem(content[i]["ID"])
                self.tableWidget.tableWidget.setItem(rowCount, 0, role)
                self.tableWidget.tableWidget.setItem(rowCount, 1, utterance)
            elif content[i]["role"] == "child":    #兒童
                if content[i]["ID"]:   #如果有編號(有採計)
                    self.childNum += 1
                else:
                    font = utterance.font()
                    font.setBold(True)
                    utterance.setFont(font)
                role = QtWidgets.QTableWidgetItem(content[i]["ID"])
                self.tableWidget.tableWidget.setItem(rowCount, 3, role)
                self.tableWidget.tableWidget.setItem(rowCount, 4, utterance)
            self.tableWidget.tableWidget.setItem(rowCount, 2, scenario)

        self.tableWidget.checkAllID()
        self._setColumnColor()
        self._setTableChildIDUneditable()

    def _setColumnColor(self):
        for rowIndex in range(self.tableWidget.tableWidget.rowCount()):
            self.tableWidget.tableWidget.item(rowIndex,0).setBackground(QtGui.QColor("#dbedf8"))
            self.tableWidget.tableWidget.item(rowIndex,1).setBackground(QtGui.QColor("#dbedf8"))
            self.tableWidget.tableWidget.item(rowIndex,2).setBackground(QtGui.QColor("#fffefeec"))
            self.tableWidget.tableWidget.item(rowIndex,3).setBackground(QtGui.QColor("#cdf5d4"))
            self.tableWidget.tableWidget.item(rowIndex,4).setBackground(QtGui.QColor("#cdf5d4"))

    #用Thread呼叫匯入錄音檔
    def _tranferAudio(self):

        filePath, _ = QtWidgets.QFileDialog.getOpenFileName(None,
                                        "開啟音訊",
                                        "",
                                        "Audio Files(*.mp3 *.m4a *.wav)")
        if os.path.exists(filePath) == False or filePath == None:
            return

        #傳signal給MainWindow: 開啟Loading頁
        audio_length = self.audio.getAudioLength(filePath)
        self.procMain.emit(5, audio_length)

        #Create a QThread object
        self.thread = QtCore.QThread()
        #Create a worker object
        self.worker = Worker(partial(self._importAudio, filePath))
        #Move worker to the thread
        self.worker.moveToThread(self.thread)
        #Connect signals and slots
        self.thread.started.connect(self.worker.run)
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)
        #self.worker.progress.connect(self.reportProgress)
        #Start the thread
        self.thread.start()

    #匯入錄音檔
    def _importAudio(self, filePath):
        text = self.audio.importAudio(filePath)

        content = []
        if text:
            for i in range(len(text)):
                data = {'ID': '', 'role': '', 'utterance': '', 'scenario': ''}
                self.childNum += 1
                data["ID"] = str(i+1)
                data["role"] = "child"
                data["utterance"] = text[i]
                content.append(data)

        self.content = content
        self._setTable(self.content)

        #傳signal給MainWindow: 關閉Loading頁
        self.procMain.emit(6, 0)

    #新增列
    def _addRow(self):
        data = {'ID': '', 'role': '', 'utterance': '', 'scenario': ''}
        data['scenario'] = self.input_scenario.text()

        if self.cmb_role.currentText() == '兒童':   #新增兒童語句
            if self.input_utterance.text():  #檢查有輸入句子
                if not self.cbx_notCount.isChecked():   #此句採計
                    self.childNum += 1
                    data['ID'] = self.childNum.__str__()
                data['role'] = 'child'
                data['utterance'] = self.input_utterance.text()

                content = self._getCurrentContent()
                content.append(data)
                self._setTable(content) #更新Table
                self.tableWidget.tableWidget.scrollToBottom() #新增完會保持置底

                self.clearInput()   #清空、復原輸入欄
                self.input_utterance.setFocus()     #focus到語句欄
            else:
                self._setInpBorderColorAndJumpMsg('NoUtter')

        elif self.cmb_role.currentText() == "語境":   #只新增語境
            if self.input_scenario.text():  #檢查有輸入語境
                content = self._getCurrentContent()
                content.append(data)
                self._setTable(content) #更新Table
                self.tableWidget.tableWidget.scrollToBottom() #新增完會保持置底

                self.clearInput()   #清空、復原輸入欄
                self.input_utterance.setFocus()     #focus到語句欄
            else:
                self._setInpBorderColorAndJumpMsg('NoScenario')

        else:   #新增成人語句
            if self.cmb_role.currentText().encode( 'UTF-8' ).isalpha():
                if self.input_utterance.text():  #檢查有輸入句子
                    if not self.cbx_notCount.isChecked():   #此句採計
                        if not self.cmb_role.currentText() in self.adultNums:  #新的成人編號
                            self.adultNums[self.cmb_role.currentText()] = 1
                        else:   #已有的成人編號
                            self.adultNums[self.cmb_role.currentText()] += 1
                        ID = self.cmb_role.currentText() + self.adultNums[self.cmb_role.currentText()].__str__()
                        data['ID'] = ID
                    data['role'] = 'adult'
                    data['utterance'] = self.input_utterance.text()

                    content = self._getCurrentContent()
                    content.append(data)
                    self._setTable(content) #更新Table
                    self.tableWidget.tableWidget.scrollToBottom() #新增完會保持置底

                    self.clearInput()   #清空、復原輸入欄
                    self.input_utterance.setFocus()     #focus到語句欄
                else:   #沒輸入語句
                    self._setInpBorderColorAndJumpMsg('NoUtter')
            else:   #編號不是英文
                self.msg_roleNotAlpha.exec_()

    #刪除列
    def _deleteRow(self):
        self.clearInput()  #清空、復原輸入欄

        indexes = self.tableWidget.tableWidget.selectionModel().selectedRows()
        if indexes:
            for index in sorted(indexes, reverse = True):
                adultUtter = self.tableWidget.tableWidget.item(index.row(), 1)
                childUtter = self.tableWidget.tableWidget.item(index.row(), 4)

                #刪除成人語句
                if adultUtter != None and adultUtter.text() != '':
                    try:
                        pattern = r"[a-zA-Z]+"
                        key = re.search(pattern,self.tableWidget.tableWidget.item(index.row(), 0).text()).group()
                        self.adultNums[key] -= 1   #成人編號-1
                        if self.adultNums[key] == 0:
                            self.cmb_role.removeItem(self.cmb_role.findText(key))
                    except:
                        print('刪除成人不採計')
                #刪除兒童語句
                if childUtter and childUtter.text() != '':
                    self.childNum -= 1  #兒童編號-1
                self.tableWidget.tableWidget.removeRow(index.row())
            self.tableWidget.checkAllID()
            self._syncTableCmbRoleNum()
        else:
            self.msg_deleteNotSelect.exec_()

    #更改table時同步更新comboBox編號
    def _syncTableCmbRoleNum(self):
        checkAdultNum = {}
        checkChildNum = 0
        for index in range(self.tableWidget.tableWidget.rowCount()):
            adultID = self.tableWidget.tableWidget.item(index, 0)
            childID = self.tableWidget.tableWidget.item(index, 3)

            if adultID:   #成人語句
                if adultID.text().__len__() != 0:   #不是空字串
                    try:
                        pattern = r"[a-zA-Z]+"
                        key = re.search(pattern,adultID.text()).group()
                        if not key in checkAdultNum:
                            checkAdultNum[key] = 1
                            if not key in self.adultNums: #此編號不在原本的成人編號裡
                                self.cmb_role.addItem(key)    #加進comboBox
                        else:
                            checkAdultNum[key] += 1
                    except:
                        print('')
            if childID: #兒童語句
                if childID.text().__len__() != 0:   #不是空字串
                    checkChildNum += 1
        self.adultNums = checkAdultNum  #更新成人編號
        self.childNum = checkChildNum   #更新兒童編號

        self._updateCmbRole()  #更新編號選單

    #檢查有無更改content
    def isEdit(self):
        content = self._getCurrentContent()

        if self.content == [] and content == []:
            return False
        elif self.content == content:
            return False
        else:
            return True

    #匯入個案紀錄
    def _importCase(self, caseID, date):
        self._setWidgetEnabled()
        
        if self.isEdit():   #儲存變動內容視窗
            action = self.msg_notSave.exec_()
            if action == QtWidgets.QMessageBox.Yes:
                self._save(True)
            elif action == QtWidgets.QMessageBox.Cancel:
                return

        self.clearTab(True)    #清空、復原頁面

        self.caseData = database.DatabaseApi.findContent(caseID, date)
        if self.caseData['transcriber']:
            self.transcriber = self.caseData['transcriber']
            self.input_trans.setText(self.transcriber)
        self.caseID = caseID
        self.lbl_impCaseID.setText(self.caseID)
        self.caseDate = date
        self.lbl_caseDate.setText('此個案收錄日期為\n' + date.strftime("%Y-%m-%d %H:%M"))
        self.lbl_caseDate.setVisible(True)
        self.content = self.caseData['FirstContent']
        if self.content == None:
            self.content = []
        self._setTable(self.content)    #set table

        #傳key給tab3
        key = {'caseID':caseID, 'date':date}
        self.emitKey(key)

    #儲存至資料庫
    def _save(self, isBtn):
        if self.input_trans.text():
            self.tableWidget.checkAllID()
            
            self.transcriber = self.input_trans.text()
            content = self._getCurrentContent()    #對話內容
            childUtterance = [] #兒童語句
            totalUtterance = 0  #總語句數
            validUtterance = 0  #採計語句數

            for rowIndex in range(self.tableWidget.tableWidget.rowCount()):
                #child
                if self.tableWidget.tableWidget.item(rowIndex, 4) and not self.tableWidget.tableWidget.item(rowIndex, 4).text() == '':
                    if not self.tableWidget.tableWidget.item(rowIndex, 3).text() == '':    #採計語句
                        validUtterance += 1
                    totalUtterance += 1
                    childUtterance.append(self.tableWidget.tableWidget.item(rowIndex, 4).text()) # 傳給Tab3

            database.DatabaseApi.updateContent(self.caseID, self.caseDate, self.transcriber, content, totalUtterance, validUtterance)
            utteranceNum = {'totalUtterance':totalUtterance, 'validUtterance':validUtterance}
            self.emitUtterNum(utteranceNum)
            self.content = content    #更新內容
            self.childUtterance = childUtterance

            self.clearInput()  #清空、復原輸入欄

            if isBtn:
                self.msg_save.exec_()
                if self.isEdit():
                    self.procEdit.emit()
        else:   #未輸入轉錄者
            self._setInpBorderColorAndJumpMsg('NoTrans')

    #產生彙整表並儲存至資料庫
    def _generateAndSave(self):
        if self.input_trans.text():
            self._save(False)

            #傳signal給MainWindow
            self.procMain.emit(2, 0)

            key = {'caseID':self.caseID,
                    'date':self.caseDate }
            self.emitKey(key)
            self.emitChildUtter(self.childUtterance)
        else:   #未輸入轉錄者
            self._setInpBorderColorAndJumpMsg('NoTrans')

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    ui = Tab2()
    ui.show()
    sys.exit(app.exec_())
